package com.prog2.automaticCorrections.controllers;


import com.prog2.automaticCorrections.models.FeedbackResponse;
import com.prog2.automaticCorrections.utilis.*;

import org.springframework.web.bind.annotation.RequestParam;
import org.springframework.web.multipart.MultipartFile;

import java.io.File;
import java.io.IOException;

import java.lang.reflect.InvocationTargetException;

import java.util.UUID;

import javax.servlet.annotation.MultipartConfig;

import org.apache.commons.io.FileUtils;
import org.apache.log4j.Logger;

import org.springframework.beans.factory.annotation.Value;
import org.springframework.web.bind.annotation.RequestMapping;
import org.springframework.web.bind.annotation.RequestMethod;
import org.springframework.web.bind.annotation.RestController;


@RestController
@MultipartConfig() 
public class StudentUploadController {
	
	@Value("${upload.dir.parent}")
    private String parentDir;

    @Value("${upload.dir.assignment}")
    private String folderNamePrefix;

    @Value("${upload.dir.test}")
    private String correctionFolderName; 	
	
    @Value("${upload.dir.student}")
	private String folderStudentPrefix;	
	
	@Value("${run.dir.lib}")
	private String runLibDirPath;
	
	@Value("${compile.dir.lib}")
	private String compileLibDirPath;
	
	@Value("${upload.dir.compiled}")
	private String compileOutputPrefix;
	
/**
 * Recive zip file with student task
 * @param inputFile: uploaded file recived in post request
 * @param assignmentID : ID for assignment, generated by moodle
 * @return feedbackResponse : string with checker response 
 */
	
	private static final Logger LOG = Logger.getLogger(StudentUploadController.class);
	
	@RequestMapping(value = "/upload/student" ,method = RequestMethod.POST) 
	public FeedbackResponse uploadFiles(@RequestParam("file") MultipartFile inputFile, @RequestParam("assignmentID") String assignmentID,
								  @RequestParam("studentID") String studentID) 
			throws IOException, ClassNotFoundException, InstantiationException, IllegalAccessException, NoSuchMethodException, SecurityException, IllegalArgumentException, InvocationTargetException {
			
			FeedbackResponse feedbackResponse;
			
			String assignmentFolderPath = parentDir + File.separator + folderNamePrefix + assignmentID; // /temp/assignment_01
			String folderStudentPath = assignmentFolderPath + File.separator + folderStudentPrefix + studentID; // /temp/assigment_01/consegna_200
			new File(folderStudentPath).mkdir();
			
			//take zip file, unzipping to correct folder
			File correctionFile = new File(folderStudentPath, String.valueOf(UUID.randomUUID())); // UUID to keep this file name unique
	        inputFile.transferTo(correctionFile);
	        LOG.debug("Unzipping...");
			myUnzip.unzip(correctionFile, folderStudentPath);
			
			//compile student e teacher files
			LOG.debug("Compile...");
			myCompiler mC = new myCompiler(compileLibDirPath,compileOutputPrefix);
			mC.compile(assignmentFolderPath, correctionFolderName,folderStudentPrefix, studentID);
			
			//run checker and return feedback
			LOG.debug("Run check...");
			RunUtil mJU = new RunUtil(runLibDirPath);	
			feedbackResponse = mJU.runCorrection(folderStudentPath, mC.getCompileOutputDir());
			
			//delete studente and compiled files
			LOG.debug("Delete student file...");
			FileUtils.deleteDirectory(new File(folderStudentPath));
			LOG.debug("compiled files...");
			FileUtils.deleteDirectory(mC.getCompileOutputDir());
			
				
		   return feedbackResponse;
		
			}  
	
	
	
			
			
   }

    


